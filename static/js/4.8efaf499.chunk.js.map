{"version":3,"file":"static/js/4.8efaf499.chunk.js","mappings":"wJAkDA,UAhDkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAkCF,EAAAA,EAAAA,WAAS,GAAM,eAA1CG,EAAS,KAAEC,EAAY,MAE9BC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAa,KAYjB,OAVGH,GAAaF,EAAQ,IACtBK,EAAaC,aAAY,WACrBL,GAAS,SAAAM,GAAS,OAAIA,EAAU,CAAC,GACnC,GAAG,MAGM,IAAVP,GACDG,GAAa,GAGR,WACLK,cAAcH,EAChB,CAEF,GAAG,CAACH,EAAWF,IAEf,IAIMS,EAAMC,KAAKC,MAAMX,EAAQ,IACzBY,EAAMZ,EAAQ,GAEpB,OACE,iBAAKa,UAAU,8CAA6C,WAC1D,eAAIA,UAAU,WAAU,yBACxB,iBAAKA,UAAU,oBAAmB,UAC/BJ,GAAO,GAAKA,EAAM,IAAMA,EAAIK,WAAU,MAAKF,GAAO,GAAKA,EAAM,IAAMA,EAAIE,eAG1E,mBACED,UAAU,wGACVE,QAhBc,WAClBZ,GAAcD,EAChB,EAc2B,SAEpBA,EAAY,QAAU,YAK/B,C","sources":["miniChallenges/CountDown.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst CountDown = () => {\n  const [count, setCount] = useState(65);\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    let intervalId = null;\n    // Count down\n    if(isRunning && count > 0) {\n      intervalId = setInterval(() => {\n          setCount(prevCount => prevCount-1);\n        }, 1000);\n    }\n\n    if(count === 0) {\n      setIsRunning(false);\n    }\n\n    return () => {\n      clearInterval(intervalId);\n    }\n\n  }, [isRunning, count]);\n\n  const handleStart = () => {\n    setIsRunning(!isRunning);\n  }\n\n  const min = Math.floor(count / 60);\n  const sec = count % 60;\n\n  return (\n    <div className=\"flex flex-col items-center text-textPrimary\">\n      <h1 className=\"text-5xl\">Count Down</h1>\n      <div className=\"p-3 my-2 text-3xl\">\n        {min >= 10 ? min : \"0\" + min.toString()} : {sec >= 10 ? sec : \"0\" + sec.toString()}      \n      </div>\n\n      <button \n        className=\"w-20 p-2 m-2 text-xl border-textSecondary border-2 rounded-md hover:bg-textSecondary hover:text-white\"\n        onClick={handleStart}\n      >\n        {isRunning ? \"Pause\" : \"Start\"}\n      </button>\n\n    </div>\n  )\n}\n\nexport default CountDown;"],"names":["useState","count","setCount","isRunning","setIsRunning","useEffect","intervalId","setInterval","prevCount","clearInterval","min","Math","floor","sec","className","toString","onClick"],"sourceRoot":""}